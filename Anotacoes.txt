1 Introdução ---> 1

	1.1 Abordagem tradicional ---> 2
	1.2 Uma abordagem alternativa: DevOps e entrega contínua ---> 4
	1.3 Sobre o livro ---> 6

2 Tudo começa em produção ---> 11

	2.1 Nossa aplicação de exemplo: a loja virtual ---> 12

		http://www.broadleafcommerce.org/
		https://github.com/dtsato/loja-virtual-devops/
		http://java.oracle.com/
		http://www.springframework.org/
		http://www.hibernate.org/
		http://developers.google.com/web-toolkit/
		http://lucene.apache.org/solr/
		http://tomcat.apache.org/
		http://www.mysql.com/

	2.2 Instalando o ambiente de produção ---> 15

		http://www.vagrantup.com
		http://www.virtualbox.org
		http://www.virtualbox.org/wiki/Downloads
		http://www.vagrantup.com/downloads.html
		http://www.vagrantbox.es/ (Boxes para baixar)
		https://vagrantcloud.com/

		$ vagrant box add hashicorp/precise32

		Criando o arquivo inicial Vagrantfile
		Criado a configuracoes iniciais atraves do Vagrantfile e iniciado as maquinas com o comando >> 
			$ vagrant up


	2.3 Configurando dependências nos servidores de produção ---> 20

		Configurando as dependencia do servidor bd

			vagrant@db$ sudo apt-get update
			vagrant@db$ sudo apt-get install mysql-server

			Criar um arquivo de configuracao do mysql com o comando 
				vagrant@db$ sudo nano /etc/mysql/conf.d/allow_external.cnf

				e conteudo .:
				[mysqld]
					bind-address = 0.0.0.0

			depois reiniciar o serviço do mysql
				vagrant@db$ sudo service mysql restart

			Criaçao do db e apos verificando se ocorreu tudo bem >>
				vagrant@db$ mysqladmin -u root -p create loja_schema
				vagrant@db$ mysql -u root -p -e "SHOW DATABASES"

			Remover a conta anonima do mysql >>
				vagrant@db$ mysql -u root -p -e "DELETE FROM mysql.user WHERE user=''; FLUSH PRIVILEGES"

			Criar um usuario loja com a senha lojasecret >>
				vagrant@db$ mysql -u root -p -e "GRANT ALL PRIVILEGES ON loja_schema.* TO 'loja'@'%' IDENTIFIED BY 'lojasecret';"

			Testando se o usuario foi criado corretamente >>
				vagrant@db$ mysql -u loja -p loja_schema -e "select database(), user()"

		Servidor web

			Instalando o tomcat >>
				vagrant@web$ sudo apt-get update
				vagrant@web$ sudo apt-get install tomcat7 mysql-client

			Criando uma conexao ssl com keytools
				vagrant@web$ cd /var/lib/tomcat7/conf
				vagrant@web$ sudo keytool -genkey -alias tomcat -keyalg RSA -keystore .keystore

			Configurando o tomcat para utilizar o ssl detalhes pg 26-27
				vagrant@web$ sudo nano /var/lib/tomcat7/conf/server.xml

			Aumentando a memoria do tomcat 
				vagrant@web$ sudo nano /etc/default/tomcat7
					JAVA_OPTS="-Djava.awt.headless=true -Xmx512M -XX:+UseConcMarkSweepGC"

			e reiniciar o tomcat
				vagrant@web$ sudo service tomcat7 restart

	2.4 Build e deploy da aplicação ---> 28

		Instalando no servidor web algumas ferramentas necessarias
			vagrant@web$ sudo apt-get install git maven2 openjdk-6-jdk

		Depois baixamos o codigo do Github e executaremos o build rodando o maven
			vagrant@web$ cd
			vagrant@web$ git clone https://github.com/dtsato/loja-virtual-devops.git
				...
				...
			vagrant@web$ cd loja-virtual-devops
			vagrant@web$ export MAVEN_OPTS=-Xmx256m
			vagrant@web$ mvn install
				...
				...

		Configuracao no tomcat da fonte de dados jdbc/web, jdbc/secure e jdbc/storage. pg 31
			vagrant@web$ sudo nano /var/lib/tomcat7/conf/context.xml
			...

			vagrant@web$ cd ~/loja-virtual-devops
			vagrant@web$ sudo cp combined/target/devopsnapratica.war /var/lib/tomcat7/webapps
			vagrant@web$ tail -f /var/lib/tomcat7/logs/catalina.out

		Se tudo deu certo tente...
			http://192.168.33.12:8080/devopsnapratica/ 
			http://192.168.33.12:8080/devopsnapratica/admin/

	3 - Monitoramento
		
		3.1 - Instalando o servidor de monitoramento

			Inlcuindo info no Vagrantfile

				config.vm.define :monitor do |monitor_config|
					monitor_config.vm.network :private_network, :ip => "192.168.33.14"
				end

				vagrant up

			Precisamos configura o sistema do seervidor monitor para utilizar a ultima versao do nagios
				vagrant@monitor$ echo "Package: nagios* Pin: release n=raring Pin-Priority: 990" | sudo tee /etc/apt/preferences.d/nagios
				vagrant@monitor$ echo "deb http://archive.ubuntu.com/ubuntu raring main" | sudo tee /etc/apt/sources.list.d/raring.list
				vagrant@monitor$ sudo apt-get update

			Agora instalamos o nagios >>
				vagrant@monitor$ sudo apt-get install nagios3

			Verificar se ocorreu tudo bem >>
				http://nagiosadmin:secret@192.168.33.14/nagios3
				http://192.168.33.14/nagios3/
		
		3.2 - Monitorando outros servidores

			Criar um novo arquivo para definir as configuracoes >>
				vagrant@monitor$ sudo nano /etc/nagios3/conf.d/loja_virtual.cfg
					define host {
						use generic-host
						host_name 192.168.33.10
						hostgroups ssh-servers, debian-servers
					}
					define host {
						use generic-host
						host_name 192.168.33.12
						hostgroups ssh-servers, debian-servers
					}

			Reiniciar o servico >>
				vagrant@monitor$ sudo service nagios3 reload

			Adicionar nossos servidores a dois novos host groups pg 43-44 >>
				vagrant@monitor$ sudo nano /etc/nagios3/conf.d/loja_virtual.cfg

			e apos novamente recarregar o servico				

		3.3 - Explorando os comandos de verificação do Nagios

			Explorar alguns comando instalados no diretorio /usr/lib/nagios/plugins

			vagrant@monitor$ cd /usr/lib/nagios/plugins
			vagrant@monitor$ ./check_ssh 192.168.33.12
				SSH OK - OpenSSH_5.9p1 Debian-5ubuntu1 (protocol 2.0)
			vagrant@monitor$ echo $?
				0
			vagrant@monitor$ ./check_ssh 192.168.33.11
				No route to host
			vagrant@monitor$ echo $?
				2

			vagrant@monitor$ ./check_http -H 192.168.33.12
				HTTP CRITICAL - Unable to open TCP socket
			vagrant@monitor$ echo $?
				2
			vagrant@monitor$ ./check_http -H 192.168.33.12 -p 8080
				HTTP OK: HTTP/1.1 200 OK - 2134 bytes in 0.007 second response
				time ...
			vagrant@monitor$ echo $?
				0

			Verificar o espaço em disco disponivel >>

			vagrant@monitor$ ./check_disk -H 192.168.33.12 -w 10% -c 5%
				/usr/lib/nagios/plugins/check_disk: invalid option -- ’H’
				Unknown argument
				Usage:
				check_disk -w limit -c limit [-W limit] [-K limit] ...
			vagrant@monitor$ ./check_disk -w 10% -c 5%
				DISK OK - free space: / 74473 MB (97% inode=99%); ...

		3.4 - Adicionando verificações mais específicas

			e configuração /etc/nagios3/conf.d/loja_virtual.cfg na pg 48

			verificando os argumentos aceitaveis >>
				vagrant@monitor$ /usr/lib/nagios/plugins/check_mysql --help

			acrescentado um novo servico na pagina 49
			verificado os  itens acrescentados >>
				vagrant@monitor$ cat /etc/nagios-plugins/config/mysql.cfg
			verificando outro comando >>
				vagrant@monitor$ /usr/lib/nagios/plugins/check_http --help
			acrescetando mais itens 51-52 depois lembrar de recarregar o nagios

		3.5 - Recebendo alertas

			Verificadando a definicao de alerta do nagios
				vagrant@monitor$ cat /etc/nagios3/commands.cfg
			Periodos de envios de alerta
				vagrant@monitor$ cat /etc/nagios3/conf.d/timeperiods_nagios2.cfg
			Quem recebe
				vagrant@monitor$ cat /etc/nagios3/conf.d/contacts_nagios2.cfg
			Fazer o reload do arquivo depois de alterar quem ira receber o email
				vagrant@monitor$ sudo service nagios3 reload
				
			Para verificar se esta funcionando o envio de email
				vagrant@monitor$ sudo service ssh stop
			depois volta
				vagrant@monitor$ sudo service ssh start

		3.6 - Um problema atinge produção, e agora?

			vagrant@monitor$ logout
			$ vagrant destroy db
			recebimento de alerta, proxima parte automatizar mais e mais

	4 - Infraestrutura como código
		
		4.1 - Provisionamento, configuração ou deploy?
		
			Provisionamento explicaçao detalhada

		4.2 - Ferramentas de gerenciamento de configuração

			Detalhes...

		4.3 - Introdução ao Puppet: recursos, provedores, manifestos e dependências

			$ vagrant up db
			$ vagrant ssh db
			vagrant@db$
				Criando um arquivo db.pp diretamente detalhes inseridor ver pg 68
					vagrant@db$ nano db.pp
			vagrant@db$ sudo puppet apply db.pp

				Colocando mais algumas informacoes da no db.pp na pg 69
				depois rodar novamente o comando >>
					vagrant@db$ sudo puppet apply db.pp

			Depois verificamos se o mysql-server está instalado no sistema
				vagrant@db$ aptitude show mysql-server
			Se rodarmos o puppet novamente ele informara que esta instalado tb.
				vagrant@db$ sudo puppet apply db.pp

			Verificar a lista dos provedores disponiveis para um determinado recurso
				vagrant@db$ puppet describe package

			Recomeçar usando Puppet com Vagrant
				vagrant@db$ logout
				$ vagrant destroy db

				Criando um novo diretorio com o nome manifests
					$sudo mkdir manifests


		4.4 - Reinstalando o servidor de banco de dados
		4.5 - Reinstalando o servidor web
		4.6 - Fazendo deploy da aplicação

	5 - Puppet além do básico
		5.1 - Classes e tipos definidos
		5.2 - Empacotamento e distribuição usando módulos
		5.3 - Refatorando o código Puppet do servidor web
		5.4 - Separação de responsabilidades: infraestrutura vs. aplicação
		5.5 - Puppet forge: reutilizando módulos da comunidade
		5.6 - Conclusão

	6 - Integração contínua
		6.1 - Práticas de engenharia ágil
		6.2 - Começando pelo básico: controle de versões
		6.3 - Automatizando o build do projeto
		6.4 - Testes automatizados: diminuindo risco e aumentando a confiança
		6.5 - O que é integração contínua?
		6.6 - Provisionando um servidor de integração contínua
		6.7 - Configurando o build da loja virtual
		6.8 - Infraestrutura como código para o servidor de integração contínua

	7 - Pipeline de entrega
		7.1 - Afinidade com a infraestrutura: usando pacotes nativos
		7.2 - Integração contínua do código de infraestrutura
		7.3 - Pipeline de entrega
		7.4 - Próximos Passos

	8 - Tópicos avançados
		8.1 - Fazendo deploy na nuvem
		8.2 - DevOps além das ferramentas
		8.3 - Sistemas avançados de monitoramento
		8.4 - Pipelines de entrega complexas
		8.5 - Gerenciando mudanças no banco de dados
		8.6 - Orquestração de deploy
		8.7 - Gerenciando configurações por ambiente
		8.8 - Evolução arquitetural
		8.9 - Segurança
		8.10 - Conclusão

